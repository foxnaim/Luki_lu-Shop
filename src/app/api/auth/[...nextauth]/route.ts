import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from "bcryptjs";
import { connectDB } from "@/app/components/lib/mongodb";
import { User } from "@/app/components/models/User";

export const authOptions: NextAuthOptions = {
  debug: true, // –í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª–∏
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "–ü–∞—Ä–æ–ª—å", type: "password" },
      },
      async authorize(credentials) {
        console.log("üü¢ –ù–∞—á–∞–ª–∞—Å—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...");
        await connectDB();
        console.log("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!");

        if (!credentials?.email || !credentials?.password) {
          throw new Error("‚ùå –í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å");
        }

        const user = await User.findOne({ email: credentials.email });
        console.log("üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);

        if (!user) {
          throw new Error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        const isValid = await bcrypt.compare(credentials.password, user.password);
        console.log("üîë –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π?", isValid);

        if (!isValid) {
          throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
        }

        return {
          id: user._id.toString(),
          email: user.email,
          name: user.email.split("@")[0], // –ò–º—è –±–µ—Ä—ë—Ç—Å—è –∏–∑ email
        };
      },
    }),
  ],
  pages: {
    signIn: "/auth",
  },
  secret: process.env.NEXTAUTH_SECRET,
  session: { strategy: "jwt" },
  callbacks: {
    async redirect({ url, baseUrl }) {
      console.log("üîÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:", url || baseUrl || "/");
      return url || baseUrl || "/";
    },
    async session({ session, token }) {
      console.log("üü° –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:", token);

      if (session.user) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
      }

      return session;
    },
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
      }
      return token;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
